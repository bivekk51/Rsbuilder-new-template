/*
 *
 * {{properCase name}} saga
 *
 */

import { call, put, takeLatest } from 'redux-saga/effects';
import { defaultAction, defaultActionSuccess, defaultActionError } from './actions';
import { apiClient } from '../../services/api';
// import your schema from apischema/{{camelCase name}}/defaultResponse
// import { defaultApiResponseSchema } from '../../apischema/{{camelCase name}}/defaultResponse';

const DEMO_API = 'https://jsonplaceholder.typicode.com/posts/1';

function* defaultActionSaga(): Generator<any, void, any> {
  try {
    const response = yield call(apiClient.request, DEMO_API, { method: 'GET' });
    // Uncomment and use your schema for validation
    // const parsed = defaultApiResponseSchema.safeParse(response);
    // if (!parsed.success) {
    //   throw new Error('Invalid API response: ' + JSON.stringify(parsed.error.issues));
    // }
    // yield put(defaultActionSuccess(parsed.data));
    yield put(defaultActionSuccess(response));
  } catch (error) {
    yield put(defaultActionError(error instanceof Error ? error.message : 'An error occurred'));
  }
}

export default function* {{camelCase name}}Saga() {
  yield takeLatest(defaultAction.type, defaultActionSaga);
}
